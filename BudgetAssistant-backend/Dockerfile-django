# Stage 1: Base build stage
FROM python:3.11-slim AS builder

# Create the app directory
RUN mkdir /app

# Set the working directory
WORKDIR /app

# Set environment variables to optimize Python
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

#RUN apt-get update && apt-get install -y pkg-config libmariadb-dev build-essential
RUN apt-get update && apt-get install -y pkg-config libpq-dev build-essential

# Upgrade pip and install dependencies
RUN pip install --upgrade pip 



# Copy the requirements file first (better caching)
COPY pip_packages.txt /app/
RUN echo "\nasgiref==3.8.1\ngunicorn==23.0.0" >> /app/pip_packages.txt

RUN echo "\npydevd-pycharm~=243.24978.46" >> /app/pip_packages.txt

# Install Python dependencies
RUN pip install --no-cache-dir -r pip_packages.txt

# Stage 2: Production stage
FROM python:3.11-slim

RUN useradd -m -r appuser && \
   mkdir /app && \
   chown -R appuser /app

# Copy the Python dependencies from the builder stage
COPY --from=builder /usr/local/lib/python3.11/site-packages/ /usr/local/lib/python3.11/site-packages/
COPY --from=builder /usr/local/bin/ /usr/local/bin/

# Set the working directory
WORKDIR /app
#log the contents of /app
RUN ls -la /app
RUN apt-get update && apt-get install -y pkg-config libpq-dev build-essential


# Copy application code
COPY --chown=appuser:appuser . .

# Set environment variables to optimize Python
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1 

# Switch to non-root user
USER appuser

# Expose the application port
EXPOSE 8080 29781
#EXPOSE
RUN chmod +x entrypoint.sh
COPY entrypoint.sh /entrypoint.sh
COPY create_superuser_if_missing.py /app/create_superuser_if_missing.py

RUN chmod +x wait-for-it.sh
COPY wait-for-it.sh /wait-for-it.sh
# Debug: Check if the file exists before chmod
RUN ls -l /entrypoint.sh

ENTRYPOINT ["/entrypoint.sh"]

# Start the application using Gunicorn
CMD ["gunicorn", "--bind", "0.0.0.0:8080", "--workers", "3", "pybackend.wsgi:application"]
