# Generated by Django 5.1.2 on 2024-12-31 08:43

import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import pybackend.db
import pybackend.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=100, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=(pybackend.models.RequiredFieldsMixin, models.Model),
            managers=[
                ('objects', pybackend.db.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BankAccount',
            fields=[
                ('account_number', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('alias', models.CharField(blank=True, max_length=255, null=True)),
                ('users', models.ManyToManyField(related_name='associated_bank_accounts', to=settings.AUTH_USER_MODEL)),
            ],
            bases=(pybackend.models.RequiredFieldsMixin, models.Model),
        ),
        migrations.AddField(
            model_name='customuser',
            name='bank_accounts',
            field=models.ManyToManyField(related_name='custom_users', to='pybackend.bankaccount'),
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('is_root', models.BooleanField(default=False)),
                ('qualified_name', models.TextField()),
                ('type', models.CharField(choices=[('EXPENSES', 'Expenses'), ('REVENUE', 'Revenue')], max_length=255)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='pybackend.category')),
            ],
        ),
        migrations.CreateModel(
            name='BudgetTreeNode',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('amount', models.IntegerField(default=0)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='pybackend.budgettreenode')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pybackend.category')),
            ],
        ),
        migrations.CreateModel(
            name='CategoryTree',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('EXPENSES', 'Expenses'), ('REVENUE', 'Revenue')], max_length=255)),
                ('root', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='pybackend.category')),
            ],
        ),
        migrations.CreateModel(
            name='Counterparty',
            fields=[
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('account_number', models.TextField()),
                ('street_and_number', models.TextField(blank=True, null=True)),
                ('zip_code_and_city', models.TextField(blank=True, null=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pybackend.category')),
                ('users', models.ManyToManyField(related_name='counterparties', to=settings.AUTH_USER_MODEL)),
            ],
            bases=(models.Model, pybackend.models.RequiredFieldsMixin),
        ),
        migrations.CreateModel(
            name='RuleSetWrapper',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('rule_set', models.TextField()),
                ('category', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='pybackend.category')),
                ('users', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('transaction_id', models.CharField(max_length=64, primary_key=True, serialize=False, unique=True)),
                ('booking_date', models.DateField()),
                ('statement_number', models.TextField()),
                ('transaction_number', models.TextField(unique=True)),
                ('transaction', models.TextField(blank=True, null=True)),
                ('currency_date', models.DateField()),
                ('amount', models.FloatField()),
                ('currency', models.CharField(max_length=255)),
                ('bic', models.CharField(blank=True, max_length=255, null=True)),
                ('country_code', models.CharField(max_length=255)),
                ('communications', models.TextField(blank=True, null=True)),
                ('manually_assigned_category', models.BooleanField(blank=True, default=False, null=True)),
                ('is_recurring', models.BooleanField(blank=True, default=False, null=True)),
                ('is_advance_shared_account', models.BooleanField(blank=True, default=False, null=True)),
                ('upload_timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_manually_reviewed', models.BooleanField(blank=True, default=False, null=True)),
                ('bank_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pybackend.bankaccount')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pybackend.category')),
                ('counterparty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pybackend.counterparty')),
            ],
            bases=(pybackend.models.RequiredFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='TreeNode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='pybackend.treenode')),
            ],
        ),
        migrations.CreateModel(
            name='BudgetTree',
            fields=[
                ('bank_account', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pybackend.bankaccount')),
                ('number_of_descendants', models.IntegerField(default=0)),
                ('root', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='pybackend.budgettreenode')),
            ],
            bases=(models.Model, pybackend.models.RequiredFieldsMixin),
        ),
    ]
